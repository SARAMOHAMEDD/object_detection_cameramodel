# -*- coding: utf-8 -*-
"""object_detection_using_yolov3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D8G3XR7mOaODfeJrc1QDRofAKKmWABZr
"""

import cv2
import numpy as np

# URL for the IP camera stream (replace with your mobile's IP address)
url = "http://192.000.000.000:8080/video"
cap = cv2.VideoCapture(url)

# YOLOv3 settings
whT = 320
confThreshold = 0.5
nmsThreshold = 0.3
classesfile = 'coco.names'  # Replace with your COCO class names file
classNames = []

with open(classesfile, 'rt') as f:
    classNames = f.read().rstrip('\n').split('\n')

modelConfig = 'yolov3.cfg'  # Replace with your YOLOv3 config file path
modelWeights = 'yolov3.weights'  # Replace with your YOLOv3 weights file path
net = cv2.dnn.readNetFromDarknet(modelConfig, modelWeights)
net.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)
net.setPreferableTarget(cv2.dnn.DNN_TARGET_CPU)

def findObjects(outputs, img):
    hT, wT, cT = img.shape
    bbox = []
    classIds = []
    confs = []

    for output in outputs:
        for det in output:
            scores = det[5:]
            classId = np.argmax(scores)
            confidence = scores[classId]
            if confidence > confThreshold:
                w, h = int(det[2] * wT), int(det[3] * hT)
                x, y = int((det[0] * wT) - w / 2), int((det[1] * hT) - h / 2)
                bbox.append([x, y, w, h])
                classIds.append(classId)
                confs.append(float(confidence))

    indices = cv2.dnn.NMSBoxes(bbox, confs, confThreshold, nmsThreshold)

    if len(indices) > 0:
        for i in indices.flatten():
            box = bbox[i]
            x, y, w, h = box[0], box[1], box[2], box[3]
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 2)
            cv2.putText(img, f'{classNames[classIds[i]].upper()} {int(confs[i] * 100)}%', (x, y - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # YOLOv3 object detection
    blob = cv2.dnn.blobFromImage(frame, 1/255, (whT, whT), [0, 0, 0], 1, crop=False)
    net.setInput(blob)
    layerNames = net.getLayerNames()

    # Fix for getting output layers
    outputLayers = net.getUnconnectedOutLayers()
    outputLayers = [int(i) - 1 for i in outputLayers.flatten()]
    outputNames = [layerNames[i] for i in outputLayers]

    outputs = net.forward(outputNames)

    findObjects(outputs, frame)

    resized = cv2.resize(frame, (600, 400))
    cv2.imshow("Frame", resized)

    key = cv2.waitKey(1)
    if key == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()